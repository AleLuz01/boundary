name: test-use-ui-artifact

on:
  push:
    # Sequence of patterns matched against refs/heads
    branches:    
      # Push events on main branch
      - 'test-build-downloading-ui-artifact'

env:
  PKG_NAME: "boundary"

jobs:
  get-product-version:
    runs-on: ubuntu-latest
    outputs:
      product-version: ${{ steps.get-product-version.outputs.product-version }}
    steps:
      - uses: actions/checkout@v2
      - name: Setup go
        uses: actions/setup-go@v2
        with:
          go-version: "1.17.5"
      - name: get product version
        id: get-product-version
        run: |
          make version
          echo "::set-output name=product-version::$(make version)"

  generate-metadata-file:
    needs: get-product-version
    runs-on: ubuntu-latest
    outputs:
      filepath: ${{ steps.generate-metadata-file.outputs.filepath }}
    steps:
      - name: 'Checkout directory'
        uses: actions/checkout@v2
      - name: Generate metadata file
        id: generate-metadata-file
        uses: hashicorp/actions-generate-metadata@main
        with:
          version: ${{ needs.get-product-version.outputs.product-version }}
          product: ${{ env.PKG_NAME }}

      - uses: actions/upload-artifact@v2
        with:
          name: metadata.json
          path: ${{ steps.generate-metadata-file.outputs.filepath }}

  set-ld-flags:
    needs: get-product-version
    runs-on: ubuntu-latest
    outputs:
      ldflags: ${{ steps.generate-ld-flags.outputs.ldflags }}
    steps:
      - uses: actions/checkout@v2
      - name: 'Generate ld flags'
        id: generate-ld-flags
        run: |
          project="$(go list -m)"
          sha="$(git rev-parse HEAD)"
          echo "::set-output name=ldflags::"-s -w -X \'$project/version.GitCommit=$sha\'""


  build-darwin:
    needs: 
      - get-product-version
      - set-ld-flags
    runs-on: macos-latest
    strategy:
      matrix:
        goos: [ darwin ]
        goarch: [ "amd64", "arm64" ]
        go: [ "1.17.5" ]
      fail-fast: true
    name: Go ${{ matrix.go }} ${{ matrix.goos }} ${{ matrix.goarch }} build

    env:
      GOPRIVATE: "github.com/hashicorp"
      GO111MODULE: on
      LD_FLAGS: ${{ needs.set-ld-flags.outputs.ldflags }}

    steps:
      - uses: actions/checkout@v2
      - name: Setup go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go }}
      - name: Set sha
        id: set-sha
        run: echo "::set-output name=sha::$(head -n1 internal/ui/VERSION | cut -d ' ' -f1)"
      - name: Download UI artifact
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: build-admin-ui.yaml
          # commit: ${{ steps.set-sha.outputs.sha }}
          repo: "hashicorp/boundary-ui"
         # name: admin-ui-${{ steps.set-sha.outputs.sha }}
          path: internal/ui/.tmp/boundary-ui/ui/admin/dist
      # - uses: actions/checkout@v2
      #   with:
      #     repository: "hashicorp/boundary-ui"
      #     ref: ${{ steps.set-sha.outputs.sha }}
      #     path: "internal/ui/.tmp/boundary-ui"
      # - name: Setup node and yarn
      #   uses: actions/setup-node@v2
      #   with:
      #     node-version: '14'
      #     cache: 'yarn'
      #     cache-dependency-path: 'internal/ui/.tmp/boundary-ui/yarn.lock'
      # - name: Install Yarn
      #   run: |
      #     npm install -g yarn
      # - name: UI Build
      #   working-directory: internal/ui/.tmp/boundary-ui
      #   run: |
      #     yarn install --network-timeout 300000
      #     yarn build:ui:admin
      - name: Go Build
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          mkdir -p dist out
          unset GOPATH;
          # Build plugins
          sh ./scripts/plugins.sh
          go build -v -tags "ui netcgo" -ldflags "${{ env.LD_FLAGS }}" -o dist/ ./cmd/boundary
          zip -r -j out/${{ env.PKG_NAME }}_${{ needs.get-product-version.outputs.product-version }}_${{ matrix.goos }}_${{ matrix.goarch }}.zip dist/
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ env.PKG_NAME }}_${{ needs.get-product-version.outputs.product-version }}_${{ matrix.goos }}_${{ matrix.goarch }}.zip
          path: out/${{ env.PKG_NAME }}_${{ needs.get-product-version.outputs.product-version }}_${{ matrix.goos }}_${{ matrix.goarch }}.zip
