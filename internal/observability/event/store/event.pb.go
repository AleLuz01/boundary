// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.15.8
// source: controller/storage/observability/event/store/v1/event.proto

package store

import (
	timestamp "github.com/hashicorp/boundary/internal/db/timestamp"
	_ "github.com/hashicorp/boundary/internal/gen/controller/protooptions"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EventConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// public_id is used to access EventConfig
	// via an API
	// @inject_tag: `gorm:"primary_key"`
	PublicId string `protobuf:"bytes,10,opt,name=public_id,json=publicId,proto3" json:"public_id,omitempty" gorm:"primary_key"`
	// scope_id for EventConfig
	// only global scope is supported
	// @inject_tag: `gorm:"not_null"`
	ScopeId string `protobuf:"bytes,20,opt,name=scope_id,json=scopeId,proto3" json:"scope_id,omitempty" gorm:"not_null"`
	// name is the optional friendly name
	// used to access EventConfig via an API
	// must be unique to the sscope_id
	// @inject_tag: `gorm:"default:null"`
	Name string `protobuf:"bytes,30,opt,name=name,proto3" json:"name,omitempty" gorm:"default:null"`
	// description of the EventConfig
	// @inject_tag: `gorm:"default:null"`
	Description string `protobuf:"bytes,40,opt,name=description,proto3" json:"description,omitempty" gorm:"default:null"`
	// create_time from the RDBMS
	// @inject_tag: `gorm:"default:current_timestamp"`
	CreateTime *timestamp.Timestamp `protobuf:"bytes,50,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty" gorm:"default:current_timestamp"`
	// update_time from the RDBMS
	// @inject_tag: `gorm:"default:current_timestamp"`
	UpdateTime *timestamp.Timestamp `protobuf:"bytes,60,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty" gorm:"default:current_timestamp"`
	// version allows optimistic locking of the EventConfig when modifying the
	// EventConfig
	// @inject_tag: `gorm:"default:null"`
	Version uint32 `protobuf:"varint,70,opt,name=version,proto3" json:"version,omitempty" gorm:"default:null"`
}

func (x *EventConfig) Reset() {
	*x = EventConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_storage_observability_event_store_v1_event_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventConfig) ProtoMessage() {}

func (x *EventConfig) ProtoReflect() protoreflect.Message {
	mi := &file_controller_storage_observability_event_store_v1_event_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventConfig.ProtoReflect.Descriptor instead.
func (*EventConfig) Descriptor() ([]byte, []int) {
	return file_controller_storage_observability_event_store_v1_event_proto_rawDescGZIP(), []int{0}
}

func (x *EventConfig) GetPublicId() string {
	if x != nil {
		return x.PublicId
	}
	return ""
}

func (x *EventConfig) GetScopeId() string {
	if x != nil {
		return x.ScopeId
	}
	return ""
}

func (x *EventConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EventConfig) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *EventConfig) GetCreateTime() *timestamp.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *EventConfig) GetUpdateTime() *timestamp.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *EventConfig) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type EventTypeEnabled struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// config_id is sued to access
	// EventTypeEnabled via an API
	// @inject_tag: `gorm:"primary_key"`
	ConfigId string `protobuf:"bytes,10,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty" gorm:"primary_key"`
	// event_type is an enum from the event_type_enm table
	// @inject_tag: `gorm:"primary_key;column:event_type_name"`
	EventType string `protobuf:"bytes,20,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty" gorm:"primary_key;column:event_type_name"`
}

func (x *EventTypeEnabled) Reset() {
	*x = EventTypeEnabled{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_storage_observability_event_store_v1_event_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventTypeEnabled) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventTypeEnabled) ProtoMessage() {}

func (x *EventTypeEnabled) ProtoReflect() protoreflect.Message {
	mi := &file_controller_storage_observability_event_store_v1_event_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventTypeEnabled.ProtoReflect.Descriptor instead.
func (*EventTypeEnabled) Descriptor() ([]byte, []int) {
	return file_controller_storage_observability_event_store_v1_event_proto_rawDescGZIP(), []int{1}
}

func (x *EventTypeEnabled) GetConfigId() string {
	if x != nil {
		return x.ConfigId
	}
	return ""
}

func (x *EventTypeEnabled) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

type EventSink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// public_id is used to access EventSink
	// via an API
	// @inject_tag: `gorm:"primary_key"`
	PublicId string `protobuf:"bytes,10,opt,name=public_id,json=publicId,proto3" json:"public_id,omitempty" gorm:"primary_key"`
	// config_id is used to reference
	// event_config public_id
	// @inject_tag: `gorm:"primary_key"`
	ConfigId string `protobuf:"bytes,20,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty" gorm:"primary_key"`
}

func (x *EventSink) Reset() {
	*x = EventSink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_storage_observability_event_store_v1_event_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventSink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventSink) ProtoMessage() {}

func (x *EventSink) ProtoReflect() protoreflect.Message {
	mi := &file_controller_storage_observability_event_store_v1_event_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventSink.ProtoReflect.Descriptor instead.
func (*EventSink) Descriptor() ([]byte, []int) {
	return file_controller_storage_observability_event_store_v1_event_proto_rawDescGZIP(), []int{2}
}

func (x *EventSink) GetPublicId() string {
	if x != nil {
		return x.PublicId
	}
	return ""
}

func (x *EventSink) GetConfigId() string {
	if x != nil {
		return x.ConfigId
	}
	return ""
}

type EventFileSink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// public_id is used to access EventFileSink
	// via an API
	// @inject_tag: `gorm:"primary_key"`
	PublicId string `protobuf:"bytes,10,opt,name=public_id,json=publicId,proto3" json:"public_id,omitempty" gorm:"primary_key"`
	// config_id is used to reference
	// event_sink config_id
	// @inject_tag: `gorm:"not_null"`
	ConfigId string `protobuf:"bytes,20,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty" gorm:"not_null"`
	// event_type is an enum from the event_type_enm table
	// @inject_tag: `gorm:"primary_key;column:event_type_name"`
	EventType string `protobuf:"bytes,30,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty" gorm:"primary_key;column:event_type_name"`
	// format_type is an enum from the event_format_type_enm table
	// @inject_tag: `gorm:"primary_key;column:event_format_type_name"`
	FormatType string `protobuf:"bytes,40,opt,name=format_type,json=formatType,proto3" json:"format_type,omitempty" gorm:"primary_key;column:event_format_type_name"`
	// path is the path the sink will
	// write to
	// @inject_tag: `gorm:"not_null"`
	Path string `protobuf:"bytes,70,opt,name=path,proto3" json:"path,omitempty" gorm:"not_null"`
	// file_name is the name of the file_name
	// the sink will write to
	// file_name and path must be unique
	// @inject_tag: `gorm:"not_null"`
	FileName string `protobuf:"bytes,80,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty" gorm:"not_null"`
	// rotate_bytes is when the file will
	// be rotated
	// @inject_tag: `gorm:"deffalut:null"`
	RotateBytes int32 `protobuf:"varint,90,opt,name=rotate_bytes,json=rotateBytes,proto3" json:"rotate_bytes,omitempty" gorm:"deffalut:null"`
	// rotate_duration is when the file
	// will be rotated
	// @inject_tag: `gorm:"deffalut:null"`
	RotateDuration int32 `protobuf:"varint,100,opt,name=rotate_duration,json=rotateDuration,proto3" json:"rotate_duration,omitempty" gorm:"deffalut:null"`
	// rotate_max_files is the maximum
	// files
	// @inject_tag: `gorm:"deffalut:null"`
	RotateMaxFiles int32 `protobuf:"varint,110,opt,name=rotate_max_files,json=rotateMaxFiles,proto3" json:"rotate_max_files,omitempty" gorm:"deffalut:null"`
}

func (x *EventFileSink) Reset() {
	*x = EventFileSink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_storage_observability_event_store_v1_event_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventFileSink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventFileSink) ProtoMessage() {}

func (x *EventFileSink) ProtoReflect() protoreflect.Message {
	mi := &file_controller_storage_observability_event_store_v1_event_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventFileSink.ProtoReflect.Descriptor instead.
func (*EventFileSink) Descriptor() ([]byte, []int) {
	return file_controller_storage_observability_event_store_v1_event_proto_rawDescGZIP(), []int{3}
}

func (x *EventFileSink) GetPublicId() string {
	if x != nil {
		return x.PublicId
	}
	return ""
}

func (x *EventFileSink) GetConfigId() string {
	if x != nil {
		return x.ConfigId
	}
	return ""
}

func (x *EventFileSink) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *EventFileSink) GetFormatType() string {
	if x != nil {
		return x.FormatType
	}
	return ""
}

func (x *EventFileSink) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *EventFileSink) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *EventFileSink) GetRotateBytes() int32 {
	if x != nil {
		return x.RotateBytes
	}
	return 0
}

func (x *EventFileSink) GetRotateDuration() int32 {
	if x != nil {
		return x.RotateDuration
	}
	return 0
}

func (x *EventFileSink) GetRotateMaxFiles() int32 {
	if x != nil {
		return x.RotateMaxFiles
	}
	return 0
}

type EventStdErrSink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// public_id is used to access EventFileSink
	// via an API
	// @inject_tag: `gorm:"primary_key"`
	PublicId string `protobuf:"bytes,10,opt,name=public_id,json=publicId,proto3" json:"public_id,omitempty" gorm:"primary_key"`
	// config_id is used to reference
	// event_sink config_id
	// @inject_tag: `gorm:"not_null"`
	ConfigId string `protobuf:"bytes,20,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty" gorm:"not_null"`
	// event_type is an enum from the event_type_enm table
	// @inject_tag: `gorm:"primary_key;column:event_type_name"`
	EventType string `protobuf:"bytes,30,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty" gorm:"primary_key;column:event_type_name"`
	// format_type is an enum from the event_format_type_enm table
	// @inject_tag: `gorm:"primary_key;column:event_format_type_name"`
	FormatType string `protobuf:"bytes,40,opt,name=format_type,json=formatType,proto3" json:"format_type,omitempty" gorm:"primary_key;column:event_format_type_name"`
}

func (x *EventStdErrSink) Reset() {
	*x = EventStdErrSink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_storage_observability_event_store_v1_event_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventStdErrSink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventStdErrSink) ProtoMessage() {}

func (x *EventStdErrSink) ProtoReflect() protoreflect.Message {
	mi := &file_controller_storage_observability_event_store_v1_event_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventStdErrSink.ProtoReflect.Descriptor instead.
func (*EventStdErrSink) Descriptor() ([]byte, []int) {
	return file_controller_storage_observability_event_store_v1_event_proto_rawDescGZIP(), []int{4}
}

func (x *EventStdErrSink) GetPublicId() string {
	if x != nil {
		return x.PublicId
	}
	return ""
}

func (x *EventStdErrSink) GetConfigId() string {
	if x != nil {
		return x.ConfigId
	}
	return ""
}

func (x *EventStdErrSink) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *EventStdErrSink) GetFormatType() string {
	if x != nil {
		return x.FormatType
	}
	return ""
}

type EventFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//public_id is used to access EventFilter
	// @inject_tag: `gorm:"primary_key"`
	PublicId string `protobuf:"bytes,10,opt,name=public_id,json=publicId,proto3" json:"public_id,omitempty" gorm:"primary_key"`
	//sink_id is used to reference
	//event_sync public_id
	// @inject_tag: `gorm:"not_null"`
	SinkId string `protobuf:"bytes,20,opt,name=sink_id,json=sinkId,proto3" json:"sink_id,omitempty" gorm:"not_null"`
	//filter_type is an enum from the
	// event_filter_type_enm table
	// @inject_tag: `gorm:"primary_key;column:event_filter_type_name"`
	FilterType string `protobuf:"bytes,30,opt,name=filter_type,json=filterType,proto3" json:"filter_type,omitempty" gorm:"primary_key;column:event_filter_type_name"`
	//filter is the go-bexpr filter
	//@inject_tag: `gorm:"default:null"`
	Filter string `protobuf:"bytes,40,opt,name=filter,proto3" json:"filter,omitempty" gorm:"default:null"`
}

func (x *EventFilter) Reset() {
	*x = EventFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_storage_observability_event_store_v1_event_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventFilter) ProtoMessage() {}

func (x *EventFilter) ProtoReflect() protoreflect.Message {
	mi := &file_controller_storage_observability_event_store_v1_event_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventFilter.ProtoReflect.Descriptor instead.
func (*EventFilter) Descriptor() ([]byte, []int) {
	return file_controller_storage_observability_event_store_v1_event_proto_rawDescGZIP(), []int{5}
}

func (x *EventFilter) GetPublicId() string {
	if x != nil {
		return x.PublicId
	}
	return ""
}

func (x *EventFilter) GetSinkId() string {
	if x != nil {
		return x.SinkId
	}
	return ""
}

func (x *EventFilter) GetFilterType() string {
	if x != nil {
		return x.FilterType
	}
	return ""
}

func (x *EventFilter) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

var File_controller_storage_observability_event_store_v1_event_proto protoreflect.FileDescriptor

var file_controller_storage_observability_event_store_v1_event_proto_rawDesc = []byte{
	0x0a, 0x3b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x76,
	0x31, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x2f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2f, 0x76, 0x31, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe1, 0x02, 0x0a, 0x0b,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x10, 0xc2, 0xdd, 0x29, 0x0c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e,
	0xc2, 0xdd, 0x29, 0x1a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x46, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x4e, 0x0a, 0x10, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x45, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x6e, 0x6b, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x22, 0xb0, 0x02, 0x0a, 0x0d, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x6e, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x50, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x6f, 0x74, 0x61, 0x74,
	0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x64, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x28, 0x0a, 0x10, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x72, 0x6f, 0x74, 0x61, 0x74,
	0x65, 0x4d, 0x61, 0x78, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x8b, 0x01, 0x0a, 0x0f, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x64, 0x45, 0x72, 0x72, 0x53, 0x69, 0x6e, 0x6b, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x9d, 0x01, 0x0a, 0x0b, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x37,
	0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f,
	0xc2, 0xdd, 0x29, 0x1b, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x11, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x48, 0x5a, 0x46, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2f,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x3b, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_controller_storage_observability_event_store_v1_event_proto_rawDescOnce sync.Once
	file_controller_storage_observability_event_store_v1_event_proto_rawDescData = file_controller_storage_observability_event_store_v1_event_proto_rawDesc
)

func file_controller_storage_observability_event_store_v1_event_proto_rawDescGZIP() []byte {
	file_controller_storage_observability_event_store_v1_event_proto_rawDescOnce.Do(func() {
		file_controller_storage_observability_event_store_v1_event_proto_rawDescData = protoimpl.X.CompressGZIP(file_controller_storage_observability_event_store_v1_event_proto_rawDescData)
	})
	return file_controller_storage_observability_event_store_v1_event_proto_rawDescData
}

var file_controller_storage_observability_event_store_v1_event_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_controller_storage_observability_event_store_v1_event_proto_goTypes = []interface{}{
	(*EventConfig)(nil),         // 0: controller.storage.observability.event.store.v1.EventConfig
	(*EventTypeEnabled)(nil),    // 1: controller.storage.observability.event.store.v1.EventTypeEnabled
	(*EventSink)(nil),           // 2: controller.storage.observability.event.store.v1.EventSink
	(*EventFileSink)(nil),       // 3: controller.storage.observability.event.store.v1.EventFileSink
	(*EventStdErrSink)(nil),     // 4: controller.storage.observability.event.store.v1.EventStdErrSink
	(*EventFilter)(nil),         // 5: controller.storage.observability.event.store.v1.EventFilter
	(*timestamp.Timestamp)(nil), // 6: controller.storage.timestamp.v1.Timestamp
}
var file_controller_storage_observability_event_store_v1_event_proto_depIdxs = []int32{
	6, // 0: controller.storage.observability.event.store.v1.EventConfig.create_time:type_name -> controller.storage.timestamp.v1.Timestamp
	6, // 1: controller.storage.observability.event.store.v1.EventConfig.update_time:type_name -> controller.storage.timestamp.v1.Timestamp
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_controller_storage_observability_event_store_v1_event_proto_init() }
func file_controller_storage_observability_event_store_v1_event_proto_init() {
	if File_controller_storage_observability_event_store_v1_event_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_controller_storage_observability_event_store_v1_event_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_storage_observability_event_store_v1_event_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventTypeEnabled); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_storage_observability_event_store_v1_event_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventSink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_storage_observability_event_store_v1_event_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventFileSink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_storage_observability_event_store_v1_event_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventStdErrSink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_storage_observability_event_store_v1_event_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_controller_storage_observability_event_store_v1_event_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_controller_storage_observability_event_store_v1_event_proto_goTypes,
		DependencyIndexes: file_controller_storage_observability_event_store_v1_event_proto_depIdxs,
		MessageInfos:      file_controller_storage_observability_event_store_v1_event_proto_msgTypes,
	}.Build()
	File_controller_storage_observability_event_store_v1_event_proto = out.File
	file_controller_storage_observability_event_store_v1_event_proto_rawDesc = nil
	file_controller_storage_observability_event_store_v1_event_proto_goTypes = nil
	file_controller_storage_observability_event_store_v1_event_proto_depIdxs = nil
}
